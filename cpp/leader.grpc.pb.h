// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: leader.proto
#ifndef GRPC_leader_2eproto__INCLUDED
#define GRPC_leader_2eproto__INCLUDED

#include "leader.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace leader {

class NodeService final {
 public:
  static constexpr char const* service_full_name() {
    return "leader.NodeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::leader::NodeStatus& request, ::leader::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>> AsyncHeartbeat(::grpc::ClientContext* context, const ::leader::NodeStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::leader::NodeStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    virtual ::grpc::Status AssignTask(::grpc::ClientContext* context, const ::leader::Task& request, ::leader::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>> AsyncAssignTask(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>>(AsyncAssignTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>> PrepareAsyncAssignTask(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>>(PrepareAsyncAssignTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestWork(::grpc::ClientContext* context, const ::leader::WorkRequest& request, ::leader::WorkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::WorkResponse>> AsyncRequestWork(::grpc::ClientContext* context, const ::leader::WorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::WorkResponse>>(AsyncRequestWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::WorkResponse>> PrepareAsyncRequestWork(::grpc::ClientContext* context, const ::leader::WorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::WorkResponse>>(PrepareAsyncRequestWorkRaw(context, request, cq));
    }
    virtual ::grpc::Status TransferWork(::grpc::ClientContext* context, const ::leader::Task& request, ::leader::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>> AsyncTransferWork(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>>(AsyncTransferWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>> PrepareAsyncTransferWork(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>>(PrepareAsyncTransferWorkRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Heartbeat(::grpc::ClientContext* context, const ::leader::NodeStatus* request, ::leader::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Heartbeat(::grpc::ClientContext* context, const ::leader::NodeStatus* request, ::leader::Ack* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AssignTask(::grpc::ClientContext* context, const ::leader::Task* request, ::leader::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AssignTask(::grpc::ClientContext* context, const ::leader::Task* request, ::leader::Ack* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestWork(::grpc::ClientContext* context, const ::leader::WorkRequest* request, ::leader::WorkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestWork(::grpc::ClientContext* context, const ::leader::WorkRequest* request, ::leader::WorkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TransferWork(::grpc::ClientContext* context, const ::leader::Task* request, ::leader::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TransferWork(::grpc::ClientContext* context, const ::leader::Task* request, ::leader::Ack* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::leader::NodeStatus& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::leader::NodeStatus& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>* AsyncAssignTaskRaw(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>* PrepareAsyncAssignTaskRaw(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::leader::WorkResponse>* AsyncRequestWorkRaw(::grpc::ClientContext* context, const ::leader::WorkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::leader::WorkResponse>* PrepareAsyncRequestWorkRaw(::grpc::ClientContext* context, const ::leader::WorkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>* AsyncTransferWorkRaw(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::leader::Ack>* PrepareAsyncTransferWorkRaw(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::leader::NodeStatus& request, ::leader::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::Ack>> AsyncHeartbeat(::grpc::ClientContext* context, const ::leader::NodeStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::Ack>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::Ack>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::leader::NodeStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::Ack>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    ::grpc::Status AssignTask(::grpc::ClientContext* context, const ::leader::Task& request, ::leader::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::Ack>> AsyncAssignTask(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::Ack>>(AsyncAssignTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::Ack>> PrepareAsyncAssignTask(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::Ack>>(PrepareAsyncAssignTaskRaw(context, request, cq));
    }
    ::grpc::Status RequestWork(::grpc::ClientContext* context, const ::leader::WorkRequest& request, ::leader::WorkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::WorkResponse>> AsyncRequestWork(::grpc::ClientContext* context, const ::leader::WorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::WorkResponse>>(AsyncRequestWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::WorkResponse>> PrepareAsyncRequestWork(::grpc::ClientContext* context, const ::leader::WorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::WorkResponse>>(PrepareAsyncRequestWorkRaw(context, request, cq));
    }
    ::grpc::Status TransferWork(::grpc::ClientContext* context, const ::leader::Task& request, ::leader::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::Ack>> AsyncTransferWork(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::Ack>>(AsyncTransferWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::Ack>> PrepareAsyncTransferWork(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::leader::Ack>>(PrepareAsyncTransferWorkRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Heartbeat(::grpc::ClientContext* context, const ::leader::NodeStatus* request, ::leader::Ack* response, std::function<void(::grpc::Status)>) override;
      void Heartbeat(::grpc::ClientContext* context, const ::leader::NodeStatus* request, ::leader::Ack* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AssignTask(::grpc::ClientContext* context, const ::leader::Task* request, ::leader::Ack* response, std::function<void(::grpc::Status)>) override;
      void AssignTask(::grpc::ClientContext* context, const ::leader::Task* request, ::leader::Ack* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestWork(::grpc::ClientContext* context, const ::leader::WorkRequest* request, ::leader::WorkResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestWork(::grpc::ClientContext* context, const ::leader::WorkRequest* request, ::leader::WorkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TransferWork(::grpc::ClientContext* context, const ::leader::Task* request, ::leader::Ack* response, std::function<void(::grpc::Status)>) override;
      void TransferWork(::grpc::ClientContext* context, const ::leader::Task* request, ::leader::Ack* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::leader::Ack>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::leader::NodeStatus& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::leader::Ack>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::leader::NodeStatus& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::leader::Ack>* AsyncAssignTaskRaw(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::leader::Ack>* PrepareAsyncAssignTaskRaw(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::leader::WorkResponse>* AsyncRequestWorkRaw(::grpc::ClientContext* context, const ::leader::WorkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::leader::WorkResponse>* PrepareAsyncRequestWorkRaw(::grpc::ClientContext* context, const ::leader::WorkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::leader::Ack>* AsyncTransferWorkRaw(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::leader::Ack>* PrepareAsyncTransferWorkRaw(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Heartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_AssignTask_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestWork_;
    const ::grpc::internal::RpcMethod rpcmethod_TransferWork_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::leader::NodeStatus* request, ::leader::Ack* response);
    virtual ::grpc::Status AssignTask(::grpc::ServerContext* context, const ::leader::Task* request, ::leader::Ack* response);
    virtual ::grpc::Status RequestWork(::grpc::ServerContext* context, const ::leader::WorkRequest* request, ::leader::WorkResponse* response);
    virtual ::grpc::Status TransferWork(::grpc::ServerContext* context, const ::leader::Task* request, ::leader::Ack* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Heartbeat() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::leader::NodeStatus* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::leader::NodeStatus* request, ::grpc::ServerAsyncResponseWriter< ::leader::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AssignTask() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, const ::leader::Task* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAssignTask(::grpc::ServerContext* context, ::leader::Task* request, ::grpc::ServerAsyncResponseWriter< ::leader::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestWork() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RequestWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWork(::grpc::ServerContext* /*context*/, const ::leader::WorkRequest* /*request*/, ::leader::WorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestWork(::grpc::ServerContext* context, ::leader::WorkRequest* request, ::grpc::ServerAsyncResponseWriter< ::leader::WorkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TransferWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TransferWork() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TransferWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferWork(::grpc::ServerContext* /*context*/, const ::leader::Task* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferWork(::grpc::ServerContext* context, ::leader::Task* request, ::grpc::ServerAsyncResponseWriter< ::leader::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Heartbeat<WithAsyncMethod_AssignTask<WithAsyncMethod_RequestWork<WithAsyncMethod_TransferWork<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::leader::NodeStatus, ::leader::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::leader::NodeStatus* request, ::leader::Ack* response) { return this->Heartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_Heartbeat(
        ::grpc::MessageAllocator< ::leader::NodeStatus, ::leader::Ack>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::leader::NodeStatus, ::leader::Ack>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::leader::NodeStatus* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::leader::NodeStatus* /*request*/, ::leader::Ack* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AssignTask() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::leader::Task, ::leader::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::leader::Task* request, ::leader::Ack* response) { return this->AssignTask(context, request, response); }));}
    void SetMessageAllocatorFor_AssignTask(
        ::grpc::MessageAllocator< ::leader::Task, ::leader::Ack>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::leader::Task, ::leader::Ack>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, const ::leader::Task* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AssignTask(
      ::grpc::CallbackServerContext* /*context*/, const ::leader::Task* /*request*/, ::leader::Ack* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestWork() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::leader::WorkRequest, ::leader::WorkResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::leader::WorkRequest* request, ::leader::WorkResponse* response) { return this->RequestWork(context, request, response); }));}
    void SetMessageAllocatorFor_RequestWork(
        ::grpc::MessageAllocator< ::leader::WorkRequest, ::leader::WorkResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::leader::WorkRequest, ::leader::WorkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWork(::grpc::ServerContext* /*context*/, const ::leader::WorkRequest* /*request*/, ::leader::WorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestWork(
      ::grpc::CallbackServerContext* /*context*/, const ::leader::WorkRequest* /*request*/, ::leader::WorkResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TransferWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TransferWork() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::leader::Task, ::leader::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::leader::Task* request, ::leader::Ack* response) { return this->TransferWork(context, request, response); }));}
    void SetMessageAllocatorFor_TransferWork(
        ::grpc::MessageAllocator< ::leader::Task, ::leader::Ack>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::leader::Task, ::leader::Ack>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TransferWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferWork(::grpc::ServerContext* /*context*/, const ::leader::Task* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransferWork(
      ::grpc::CallbackServerContext* /*context*/, const ::leader::Task* /*request*/, ::leader::Ack* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Heartbeat<WithCallbackMethod_AssignTask<WithCallbackMethod_RequestWork<WithCallbackMethod_TransferWork<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Heartbeat() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::leader::NodeStatus* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AssignTask() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, const ::leader::Task* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestWork() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RequestWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWork(::grpc::ServerContext* /*context*/, const ::leader::WorkRequest* /*request*/, ::leader::WorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TransferWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TransferWork() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TransferWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferWork(::grpc::ServerContext* /*context*/, const ::leader::Task* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::leader::NodeStatus* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AssignTask() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, const ::leader::Task* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAssignTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestWork() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RequestWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWork(::grpc::ServerContext* /*context*/, const ::leader::WorkRequest* /*request*/, ::leader::WorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestWork(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TransferWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TransferWork() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TransferWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferWork(::grpc::ServerContext* /*context*/, const ::leader::Task* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferWork(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Heartbeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::leader::NodeStatus* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AssignTask() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AssignTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, const ::leader::Task* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AssignTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestWork() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestWork(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWork(::grpc::ServerContext* /*context*/, const ::leader::WorkRequest* /*request*/, ::leader::WorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestWork(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TransferWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TransferWork() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TransferWork(context, request, response); }));
    }
    ~WithRawCallbackMethod_TransferWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferWork(::grpc::ServerContext* /*context*/, const ::leader::Task* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransferWork(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Heartbeat() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::leader::NodeStatus, ::leader::Ack>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::leader::NodeStatus, ::leader::Ack>* streamer) {
                       return this->StreamedHeartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::leader::NodeStatus* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::leader::NodeStatus,::leader::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AssignTask() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::leader::Task, ::leader::Ack>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::leader::Task, ::leader::Ack>* streamer) {
                       return this->StreamedAssignTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, const ::leader::Task* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAssignTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::leader::Task,::leader::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestWork() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::leader::WorkRequest, ::leader::WorkResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::leader::WorkRequest, ::leader::WorkResponse>* streamer) {
                       return this->StreamedRequestWork(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestWork(::grpc::ServerContext* /*context*/, const ::leader::WorkRequest* /*request*/, ::leader::WorkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestWork(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::leader::WorkRequest,::leader::WorkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TransferWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TransferWork() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::leader::Task, ::leader::Ack>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::leader::Task, ::leader::Ack>* streamer) {
                       return this->StreamedTransferWork(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TransferWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TransferWork(::grpc::ServerContext* /*context*/, const ::leader::Task* /*request*/, ::leader::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransferWork(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::leader::Task,::leader::Ack>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Heartbeat<WithStreamedUnaryMethod_AssignTask<WithStreamedUnaryMethod_RequestWork<WithStreamedUnaryMethod_TransferWork<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Heartbeat<WithStreamedUnaryMethod_AssignTask<WithStreamedUnaryMethod_RequestWork<WithStreamedUnaryMethod_TransferWork<Service > > > > StreamedService;
};

}  // namespace leader


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_leader_2eproto__INCLUDED
