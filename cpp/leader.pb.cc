// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: leader.proto
// Protobuf C++ Version: 5.29.3

#include "leader.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace leader {

inline constexpr WorkRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : requester_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        max_tasks_{0},
        max_steal_count_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WorkRequest::WorkRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WorkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkRequestDefaultTypeInternal() {}
  union {
    WorkRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkRequestDefaultTypeInternal _WorkRequest_default_instance_;

inline constexpr Task::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : source_node_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        task_id_{0},
        duration_ms_{0},
        steal_count_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Task::Task(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskDefaultTypeInternal _Task_default_instance_;

inline constexpr NodeStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : node_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        score_{0},
        queue_length_{0},
        cpu_utilization_{0},
        memory_utilization_{0},
        last_heartbeat_time_{::int64_t{0}},
        is_leader_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NodeStatus::NodeStatus(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NodeStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeStatusDefaultTypeInternal() {}
  union {
    NodeStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeStatusDefaultTypeInternal _NodeStatus_default_instance_;

inline constexpr Ack::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Ack::Ack(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AckDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AckDefaultTypeInternal() {}
  union {
    Ack _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AckDefaultTypeInternal _Ack_default_instance_;

inline constexpr WorkResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : tasks_{},
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WorkResponse::WorkResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WorkResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkResponseDefaultTypeInternal() {}
  union {
    WorkResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkResponseDefaultTypeInternal _WorkResponse_default_instance_;
}  // namespace leader
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_leader_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_leader_2eproto = nullptr;
const ::uint32_t
    TableStruct_leader_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::leader::NodeStatus, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::leader::NodeStatus, _impl_.node_id_),
        PROTOBUF_FIELD_OFFSET(::leader::NodeStatus, _impl_.score_),
        PROTOBUF_FIELD_OFFSET(::leader::NodeStatus, _impl_.queue_length_),
        PROTOBUF_FIELD_OFFSET(::leader::NodeStatus, _impl_.cpu_utilization_),
        PROTOBUF_FIELD_OFFSET(::leader::NodeStatus, _impl_.memory_utilization_),
        PROTOBUF_FIELD_OFFSET(::leader::NodeStatus, _impl_.last_heartbeat_time_),
        PROTOBUF_FIELD_OFFSET(::leader::NodeStatus, _impl_.is_leader_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::leader::Task, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::leader::Task, _impl_.task_id_),
        PROTOBUF_FIELD_OFFSET(::leader::Task, _impl_.duration_ms_),
        PROTOBUF_FIELD_OFFSET(::leader::Task, _impl_.source_node_),
        PROTOBUF_FIELD_OFFSET(::leader::Task, _impl_.steal_count_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::leader::WorkRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::leader::WorkRequest, _impl_.requester_id_),
        PROTOBUF_FIELD_OFFSET(::leader::WorkRequest, _impl_.max_tasks_),
        PROTOBUF_FIELD_OFFSET(::leader::WorkRequest, _impl_.max_steal_count_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::leader::WorkResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::leader::WorkResponse, _impl_.tasks_),
        PROTOBUF_FIELD_OFFSET(::leader::WorkResponse, _impl_.success_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::leader::Ack, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::leader::Ack, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::leader::Ack, _impl_.success_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::leader::NodeStatus)},
        {15, -1, -1, sizeof(::leader::Task)},
        {27, -1, -1, sizeof(::leader::WorkRequest)},
        {38, -1, -1, sizeof(::leader::WorkResponse)},
        {48, -1, -1, sizeof(::leader::Ack)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::leader::_NodeStatus_default_instance_._instance,
    &::leader::_Task_default_instance_._instance,
    &::leader::_WorkRequest_default_instance_._instance,
    &::leader::_WorkResponse_default_instance_._instance,
    &::leader::_Ack_default_instance_._instance,
};
const char descriptor_table_protodef_leader_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\014leader.proto\022\006leader\"\247\001\n\nNodeStatus\022\017\n"
    "\007node_id\030\001 \001(\t\022\r\n\005score\030\002 \001(\002\022\024\n\014queue_l"
    "ength\030\003 \001(\005\022\027\n\017cpu_utilization\030\004 \001(\002\022\032\n\022"
    "memory_utilization\030\005 \001(\002\022\033\n\023last_heartbe"
    "at_time\030\006 \001(\003\022\021\n\tis_leader\030\007 \001(\010\"V\n\004Task"
    "\022\017\n\007task_id\030\001 \001(\005\022\023\n\013duration_ms\030\002 \001(\005\022\023"
    "\n\013source_node\030\003 \001(\t\022\023\n\013steal_count\030\004 \001(\005"
    "\"O\n\013WorkRequest\022\024\n\014requester_id\030\001 \001(\t\022\021\n"
    "\tmax_tasks\030\002 \001(\005\022\027\n\017max_steal_count\030\003 \001("
    "\005\"<\n\014WorkResponse\022\033\n\005tasks\030\001 \003(\0132\014.leade"
    "r.Task\022\017\n\007success\030\002 \001(\010\"\'\n\003Ack\022\017\n\007messag"
    "e\030\001 \001(\t\022\017\n\007success\030\002 \001(\0102\321\001\n\013NodeService"
    "\022.\n\tHeartbeat\022\022.leader.NodeStatus\032\013.lead"
    "er.Ack\"\000\022)\n\nAssignTask\022\014.leader.Task\032\013.l"
    "eader.Ack\"\000\022:\n\013RequestWork\022\023.leader.Work"
    "Request\032\024.leader.WorkResponse\"\000\022+\n\014Trans"
    "ferWork\022\014.leader.Task\032\013.leader.Ack\"\000b\006pr"
    "oto3"
};
static ::absl::once_flag descriptor_table_leader_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_leader_2eproto = {
    false,
    false,
    684,
    descriptor_table_protodef_leader_2eproto,
    "leader.proto",
    &descriptor_table_leader_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_leader_2eproto::offsets,
    file_level_enum_descriptors_leader_2eproto,
    file_level_service_descriptors_leader_2eproto,
};
namespace leader {
// ===================================================================

class NodeStatus::_Internal {
 public:
};

NodeStatus::NodeStatus(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:leader.NodeStatus)
}
inline PROTOBUF_NDEBUG_INLINE NodeStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::leader::NodeStatus& from_msg)
      : node_id_(arena, from.node_id_),
        _cached_size_{0} {}

NodeStatus::NodeStatus(
    ::google::protobuf::Arena* arena,
    const NodeStatus& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  NodeStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, score_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, score_),
           offsetof(Impl_, is_leader_) -
               offsetof(Impl_, score_) +
               sizeof(Impl_::is_leader_));

  // @@protoc_insertion_point(copy_constructor:leader.NodeStatus)
}
inline PROTOBUF_NDEBUG_INLINE NodeStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : node_id_(arena),
        _cached_size_{0} {}

inline void NodeStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, score_),
           0,
           offsetof(Impl_, is_leader_) -
               offsetof(Impl_, score_) +
               sizeof(Impl_::is_leader_));
}
NodeStatus::~NodeStatus() {
  // @@protoc_insertion_point(destructor:leader.NodeStatus)
  SharedDtor(*this);
}
inline void NodeStatus::SharedDtor(MessageLite& self) {
  NodeStatus& this_ = static_cast<NodeStatus&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.node_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* NodeStatus::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) NodeStatus(arena);
}
constexpr auto NodeStatus::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(NodeStatus),
                                            alignof(NodeStatus));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull NodeStatus::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_NodeStatus_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &NodeStatus::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<NodeStatus>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &NodeStatus::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<NodeStatus>(), &NodeStatus::ByteSizeLong,
            &NodeStatus::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_._cached_size_),
        false,
    },
    &NodeStatus::kDescriptorMethods,
    &descriptor_table_leader_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* NodeStatus::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 33, 2> NodeStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::leader::NodeStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string node_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.node_id_)}},
    // float score = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.score_)}},
    // int32 queue_length = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NodeStatus, _impl_.queue_length_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.queue_length_)}},
    // float cpu_utilization = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.cpu_utilization_)}},
    // float memory_utilization = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.memory_utilization_)}},
    // int64 last_heartbeat_time = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(NodeStatus, _impl_.last_heartbeat_time_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.last_heartbeat_time_)}},
    // bool is_leader = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NodeStatus, _impl_.is_leader_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.is_leader_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string node_id = 1;
    {PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.node_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float score = 2;
    {PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.score_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 queue_length = 3;
    {PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.queue_length_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float cpu_utilization = 4;
    {PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.cpu_utilization_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float memory_utilization = 5;
    {PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.memory_utilization_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int64 last_heartbeat_time = 6;
    {PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.last_heartbeat_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool is_leader = 7;
    {PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.is_leader_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\21\7\0\0\0\0\0\0"
    "leader.NodeStatus"
    "node_id"
  }},
};

PROTOBUF_NOINLINE void NodeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:leader.NodeStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_id_.ClearToEmpty();
  ::memset(&_impl_.score_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_leader_) -
      reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.is_leader_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* NodeStatus::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const NodeStatus& this_ = static_cast<const NodeStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* NodeStatus::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const NodeStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:leader.NodeStatus)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string node_id = 1;
          if (!this_._internal_node_id().empty()) {
            const std::string& _s = this_._internal_node_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "leader.NodeStatus.node_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // float score = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_score()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_score(), target);
          }

          // int32 queue_length = 3;
          if (this_._internal_queue_length() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_queue_length(), target);
          }

          // float cpu_utilization = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_cpu_utilization()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_cpu_utilization(), target);
          }

          // float memory_utilization = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_memory_utilization()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_memory_utilization(), target);
          }

          // int64 last_heartbeat_time = 6;
          if (this_._internal_last_heartbeat_time() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<6>(
                    stream, this_._internal_last_heartbeat_time(), target);
          }

          // bool is_leader = 7;
          if (this_._internal_is_leader() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                7, this_._internal_is_leader(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:leader.NodeStatus)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t NodeStatus::ByteSizeLong(const MessageLite& base) {
          const NodeStatus& this_ = static_cast<const NodeStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t NodeStatus::ByteSizeLong() const {
          const NodeStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:leader.NodeStatus)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string node_id = 1;
            if (!this_._internal_node_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_node_id());
            }
            // float score = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_score()) != 0) {
              total_size += 5;
            }
            // int32 queue_length = 3;
            if (this_._internal_queue_length() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_queue_length());
            }
            // float cpu_utilization = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_cpu_utilization()) != 0) {
              total_size += 5;
            }
            // float memory_utilization = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_memory_utilization()) != 0) {
              total_size += 5;
            }
            // int64 last_heartbeat_time = 6;
            if (this_._internal_last_heartbeat_time() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_last_heartbeat_time());
            }
            // bool is_leader = 7;
            if (this_._internal_is_leader() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void NodeStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NodeStatus*>(&to_msg);
  auto& from = static_cast<const NodeStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:leader.NodeStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_id().empty()) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_score()) != 0) {
    _this->_impl_.score_ = from._impl_.score_;
  }
  if (from._internal_queue_length() != 0) {
    _this->_impl_.queue_length_ = from._impl_.queue_length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_cpu_utilization()) != 0) {
    _this->_impl_.cpu_utilization_ = from._impl_.cpu_utilization_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_memory_utilization()) != 0) {
    _this->_impl_.memory_utilization_ = from._impl_.memory_utilization_;
  }
  if (from._internal_last_heartbeat_time() != 0) {
    _this->_impl_.last_heartbeat_time_ = from._impl_.last_heartbeat_time_;
  }
  if (from._internal_is_leader() != 0) {
    _this->_impl_.is_leader_ = from._impl_.is_leader_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NodeStatus::CopyFrom(const NodeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:leader.NodeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NodeStatus::InternalSwap(NodeStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_id_, &other->_impl_.node_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.is_leader_)
      + sizeof(NodeStatus::_impl_.is_leader_)
      - PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.score_)>(
          reinterpret_cast<char*>(&_impl_.score_),
          reinterpret_cast<char*>(&other->_impl_.score_));
}

::google::protobuf::Metadata NodeStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Task::_Internal {
 public:
};

Task::Task(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:leader.Task)
}
inline PROTOBUF_NDEBUG_INLINE Task::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::leader::Task& from_msg)
      : source_node_(arena, from.source_node_),
        _cached_size_{0} {}

Task::Task(
    ::google::protobuf::Arena* arena,
    const Task& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Task* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, task_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, task_id_),
           offsetof(Impl_, steal_count_) -
               offsetof(Impl_, task_id_) +
               sizeof(Impl_::steal_count_));

  // @@protoc_insertion_point(copy_constructor:leader.Task)
}
inline PROTOBUF_NDEBUG_INLINE Task::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : source_node_(arena),
        _cached_size_{0} {}

inline void Task::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, task_id_),
           0,
           offsetof(Impl_, steal_count_) -
               offsetof(Impl_, task_id_) +
               sizeof(Impl_::steal_count_));
}
Task::~Task() {
  // @@protoc_insertion_point(destructor:leader.Task)
  SharedDtor(*this);
}
inline void Task::SharedDtor(MessageLite& self) {
  Task& this_ = static_cast<Task&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.source_node_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Task::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Task(arena);
}
constexpr auto Task::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Task),
                                            alignof(Task));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Task::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Task_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Task::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Task>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Task::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Task>(), &Task::ByteSizeLong,
            &Task::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Task, _impl_._cached_size_),
        false,
    },
    &Task::kDescriptorMethods,
    &descriptor_table_leader_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Task::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 31, 2> Task::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::leader::Task>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 steal_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Task, _impl_.steal_count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Task, _impl_.steal_count_)}},
    // int32 task_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Task, _impl_.task_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Task, _impl_.task_id_)}},
    // int32 duration_ms = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Task, _impl_.duration_ms_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Task, _impl_.duration_ms_)}},
    // string source_node = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Task, _impl_.source_node_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 task_id = 1;
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.task_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 duration_ms = 2;
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.duration_ms_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string source_node = 3;
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.source_node_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 steal_count = 4;
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.steal_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\13\0\0\13\0\0\0\0"
    "leader.Task"
    "source_node"
  }},
};

PROTOBUF_NOINLINE void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:leader.Task)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_node_.ClearToEmpty();
  ::memset(&_impl_.task_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.steal_count_) -
      reinterpret_cast<char*>(&_impl_.task_id_)) + sizeof(_impl_.steal_count_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Task::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Task& this_ = static_cast<const Task&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Task::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Task& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:leader.Task)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 task_id = 1;
          if (this_._internal_task_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_task_id(), target);
          }

          // int32 duration_ms = 2;
          if (this_._internal_duration_ms() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_duration_ms(), target);
          }

          // string source_node = 3;
          if (!this_._internal_source_node().empty()) {
            const std::string& _s = this_._internal_source_node();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "leader.Task.source_node");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // int32 steal_count = 4;
          if (this_._internal_steal_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_steal_count(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:leader.Task)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Task::ByteSizeLong(const MessageLite& base) {
          const Task& this_ = static_cast<const Task&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Task::ByteSizeLong() const {
          const Task& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:leader.Task)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string source_node = 3;
            if (!this_._internal_source_node().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_source_node());
            }
            // int32 task_id = 1;
            if (this_._internal_task_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_task_id());
            }
            // int32 duration_ms = 2;
            if (this_._internal_duration_ms() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_duration_ms());
            }
            // int32 steal_count = 4;
            if (this_._internal_steal_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_steal_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Task::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Task*>(&to_msg);
  auto& from = static_cast<const Task&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:leader.Task)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_source_node().empty()) {
    _this->_internal_set_source_node(from._internal_source_node());
  }
  if (from._internal_task_id() != 0) {
    _this->_impl_.task_id_ = from._impl_.task_id_;
  }
  if (from._internal_duration_ms() != 0) {
    _this->_impl_.duration_ms_ = from._impl_.duration_ms_;
  }
  if (from._internal_steal_count() != 0) {
    _this->_impl_.steal_count_ = from._impl_.steal_count_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:leader.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Task::InternalSwap(Task* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_node_, &other->_impl_.source_node_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Task, _impl_.steal_count_)
      + sizeof(Task::_impl_.steal_count_)
      - PROTOBUF_FIELD_OFFSET(Task, _impl_.task_id_)>(
          reinterpret_cast<char*>(&_impl_.task_id_),
          reinterpret_cast<char*>(&other->_impl_.task_id_));
}

::google::protobuf::Metadata Task::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WorkRequest::_Internal {
 public:
};

WorkRequest::WorkRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:leader.WorkRequest)
}
inline PROTOBUF_NDEBUG_INLINE WorkRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::leader::WorkRequest& from_msg)
      : requester_id_(arena, from.requester_id_),
        _cached_size_{0} {}

WorkRequest::WorkRequest(
    ::google::protobuf::Arena* arena,
    const WorkRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WorkRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, max_tasks_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, max_tasks_),
           offsetof(Impl_, max_steal_count_) -
               offsetof(Impl_, max_tasks_) +
               sizeof(Impl_::max_steal_count_));

  // @@protoc_insertion_point(copy_constructor:leader.WorkRequest)
}
inline PROTOBUF_NDEBUG_INLINE WorkRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : requester_id_(arena),
        _cached_size_{0} {}

inline void WorkRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, max_tasks_),
           0,
           offsetof(Impl_, max_steal_count_) -
               offsetof(Impl_, max_tasks_) +
               sizeof(Impl_::max_steal_count_));
}
WorkRequest::~WorkRequest() {
  // @@protoc_insertion_point(destructor:leader.WorkRequest)
  SharedDtor(*this);
}
inline void WorkRequest::SharedDtor(MessageLite& self) {
  WorkRequest& this_ = static_cast<WorkRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.requester_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* WorkRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) WorkRequest(arena);
}
constexpr auto WorkRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(WorkRequest),
                                            alignof(WorkRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull WorkRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_WorkRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &WorkRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<WorkRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &WorkRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<WorkRequest>(), &WorkRequest::ByteSizeLong,
            &WorkRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(WorkRequest, _impl_._cached_size_),
        false,
    },
    &WorkRequest::kDescriptorMethods,
    &descriptor_table_leader_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* WorkRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 39, 2> WorkRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::leader::WorkRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string requester_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(WorkRequest, _impl_.requester_id_)}},
    // int32 max_tasks = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorkRequest, _impl_.max_tasks_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(WorkRequest, _impl_.max_tasks_)}},
    // int32 max_steal_count = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorkRequest, _impl_.max_steal_count_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(WorkRequest, _impl_.max_steal_count_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string requester_id = 1;
    {PROTOBUF_FIELD_OFFSET(WorkRequest, _impl_.requester_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 max_tasks = 2;
    {PROTOBUF_FIELD_OFFSET(WorkRequest, _impl_.max_tasks_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_steal_count = 3;
    {PROTOBUF_FIELD_OFFSET(WorkRequest, _impl_.max_steal_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\22\14\0\0\0\0\0\0"
    "leader.WorkRequest"
    "requester_id"
  }},
};

PROTOBUF_NOINLINE void WorkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:leader.WorkRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requester_id_.ClearToEmpty();
  ::memset(&_impl_.max_tasks_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_steal_count_) -
      reinterpret_cast<char*>(&_impl_.max_tasks_)) + sizeof(_impl_.max_steal_count_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WorkRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WorkRequest& this_ = static_cast<const WorkRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WorkRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WorkRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:leader.WorkRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string requester_id = 1;
          if (!this_._internal_requester_id().empty()) {
            const std::string& _s = this_._internal_requester_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "leader.WorkRequest.requester_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // int32 max_tasks = 2;
          if (this_._internal_max_tasks() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_max_tasks(), target);
          }

          // int32 max_steal_count = 3;
          if (this_._internal_max_steal_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_max_steal_count(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:leader.WorkRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WorkRequest::ByteSizeLong(const MessageLite& base) {
          const WorkRequest& this_ = static_cast<const WorkRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WorkRequest::ByteSizeLong() const {
          const WorkRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:leader.WorkRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string requester_id = 1;
            if (!this_._internal_requester_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_requester_id());
            }
            // int32 max_tasks = 2;
            if (this_._internal_max_tasks() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_tasks());
            }
            // int32 max_steal_count = 3;
            if (this_._internal_max_steal_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_steal_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WorkRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WorkRequest*>(&to_msg);
  auto& from = static_cast<const WorkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:leader.WorkRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_requester_id().empty()) {
    _this->_internal_set_requester_id(from._internal_requester_id());
  }
  if (from._internal_max_tasks() != 0) {
    _this->_impl_.max_tasks_ = from._impl_.max_tasks_;
  }
  if (from._internal_max_steal_count() != 0) {
    _this->_impl_.max_steal_count_ = from._impl_.max_steal_count_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WorkRequest::CopyFrom(const WorkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:leader.WorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WorkRequest::InternalSwap(WorkRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.requester_id_, &other->_impl_.requester_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkRequest, _impl_.max_steal_count_)
      + sizeof(WorkRequest::_impl_.max_steal_count_)
      - PROTOBUF_FIELD_OFFSET(WorkRequest, _impl_.max_tasks_)>(
          reinterpret_cast<char*>(&_impl_.max_tasks_),
          reinterpret_cast<char*>(&other->_impl_.max_tasks_));
}

::google::protobuf::Metadata WorkRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WorkResponse::_Internal {
 public:
};

WorkResponse::WorkResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:leader.WorkResponse)
}
inline PROTOBUF_NDEBUG_INLINE WorkResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::leader::WorkResponse& from_msg)
      : tasks_{visibility, arena, from.tasks_},
        _cached_size_{0} {}

WorkResponse::WorkResponse(
    ::google::protobuf::Arena* arena,
    const WorkResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WorkResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:leader.WorkResponse)
}
inline PROTOBUF_NDEBUG_INLINE WorkResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : tasks_{visibility, arena},
        _cached_size_{0} {}

inline void WorkResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
WorkResponse::~WorkResponse() {
  // @@protoc_insertion_point(destructor:leader.WorkResponse)
  SharedDtor(*this);
}
inline void WorkResponse::SharedDtor(MessageLite& self) {
  WorkResponse& this_ = static_cast<WorkResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* WorkResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) WorkResponse(arena);
}
constexpr auto WorkResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(WorkResponse, _impl_.tasks_) +
          decltype(WorkResponse::_impl_.tasks_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(WorkResponse), alignof(WorkResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&WorkResponse::PlacementNew_,
                                 sizeof(WorkResponse),
                                 alignof(WorkResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull WorkResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_WorkResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &WorkResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<WorkResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &WorkResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<WorkResponse>(), &WorkResponse::ByteSizeLong,
            &WorkResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(WorkResponse, _impl_._cached_size_),
        false,
    },
    &WorkResponse::kDescriptorMethods,
    &descriptor_table_leader_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* WorkResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> WorkResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::leader::WorkResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool success = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(WorkResponse, _impl_.success_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(WorkResponse, _impl_.success_)}},
    // repeated .leader.Task tasks = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(WorkResponse, _impl_.tasks_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .leader.Task tasks = 1;
    {PROTOBUF_FIELD_OFFSET(WorkResponse, _impl_.tasks_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool success = 2;
    {PROTOBUF_FIELD_OFFSET(WorkResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::leader::Task>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void WorkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:leader.WorkResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WorkResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WorkResponse& this_ = static_cast<const WorkResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WorkResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WorkResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:leader.WorkResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .leader.Task tasks = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_tasks_size());
               i < n; i++) {
            const auto& repfield = this_._internal_tasks().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // bool success = 2;
          if (this_._internal_success() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_success(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:leader.WorkResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WorkResponse::ByteSizeLong(const MessageLite& base) {
          const WorkResponse& this_ = static_cast<const WorkResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WorkResponse::ByteSizeLong() const {
          const WorkResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:leader.WorkResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .leader.Task tasks = 1;
            {
              total_size += 1UL * this_._internal_tasks_size();
              for (const auto& msg : this_._internal_tasks()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // bool success = 2;
            if (this_._internal_success() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WorkResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WorkResponse*>(&to_msg);
  auto& from = static_cast<const WorkResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:leader.WorkResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tasks()->MergeFrom(
      from._internal_tasks());
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WorkResponse::CopyFrom(const WorkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:leader.WorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WorkResponse::InternalSwap(WorkResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata WorkResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Ack::_Internal {
 public:
};

Ack::Ack(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:leader.Ack)
}
inline PROTOBUF_NDEBUG_INLINE Ack::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::leader::Ack& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

Ack::Ack(
    ::google::protobuf::Arena* arena,
    const Ack& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Ack* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:leader.Ack)
}
inline PROTOBUF_NDEBUG_INLINE Ack::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void Ack::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
Ack::~Ack() {
  // @@protoc_insertion_point(destructor:leader.Ack)
  SharedDtor(*this);
}
inline void Ack::SharedDtor(MessageLite& self) {
  Ack& this_ = static_cast<Ack&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Ack::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Ack(arena);
}
constexpr auto Ack::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Ack),
                                            alignof(Ack));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Ack::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Ack_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Ack::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Ack>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Ack::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Ack>(), &Ack::ByteSizeLong,
            &Ack::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Ack, _impl_._cached_size_),
        false,
    },
    &Ack::kDescriptorMethods,
    &descriptor_table_leader_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Ack::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 26, 2> Ack::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::leader::Ack>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool success = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Ack, _impl_.success_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Ack, _impl_.success_)}},
    // string message = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Ack, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string message = 1;
    {PROTOBUF_FIELD_OFFSET(Ack, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool success = 2;
    {PROTOBUF_FIELD_OFFSET(Ack, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\12\7\0\0\0\0\0\0"
    "leader.Ack"
    "message"
  }},
};

PROTOBUF_NOINLINE void Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:leader.Ack)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Ack::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Ack& this_ = static_cast<const Ack&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Ack::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Ack& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:leader.Ack)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string message = 1;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "leader.Ack.message");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // bool success = 2;
          if (this_._internal_success() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_success(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:leader.Ack)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Ack::ByteSizeLong(const MessageLite& base) {
          const Ack& this_ = static_cast<const Ack&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Ack::ByteSizeLong() const {
          const Ack& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:leader.Ack)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 1;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // bool success = 2;
            if (this_._internal_success() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Ack::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Ack*>(&to_msg);
  auto& from = static_cast<const Ack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:leader.Ack)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Ack::CopyFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:leader.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Ack::InternalSwap(Ack* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata Ack::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace leader
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_leader_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
