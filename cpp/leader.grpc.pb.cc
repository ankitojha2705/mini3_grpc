// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: leader.proto

#include "leader.pb.h"
#include "leader.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace leader {

static const char* NodeService_method_names[] = {
  "/leader.NodeService/Heartbeat",
  "/leader.NodeService/AssignTask",
  "/leader.NodeService/RequestWork",
  "/leader.NodeService/TransferWork",
};

std::unique_ptr< NodeService::Stub> NodeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NodeService::Stub> stub(new NodeService::Stub(channel, options));
  return stub;
}

NodeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Heartbeat_(NodeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AssignTask_(NodeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestWork_(NodeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransferWork_(NodeService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NodeService::Stub::Heartbeat(::grpc::ClientContext* context, const ::leader::NodeStatus& request, ::leader::Ack* response) {
  return ::grpc::internal::BlockingUnaryCall< ::leader::NodeStatus, ::leader::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Heartbeat_, context, request, response);
}

void NodeService::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::leader::NodeStatus* request, ::leader::Ack* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::leader::NodeStatus, ::leader::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, std::move(f));
}

void NodeService::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::leader::NodeStatus* request, ::leader::Ack* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::leader::Ack>* NodeService::Stub::PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::leader::NodeStatus& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::leader::Ack, ::leader::NodeStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Heartbeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::leader::Ack>* NodeService::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::leader::NodeStatus& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHeartbeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NodeService::Stub::AssignTask(::grpc::ClientContext* context, const ::leader::Task& request, ::leader::Ack* response) {
  return ::grpc::internal::BlockingUnaryCall< ::leader::Task, ::leader::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AssignTask_, context, request, response);
}

void NodeService::Stub::async::AssignTask(::grpc::ClientContext* context, const ::leader::Task* request, ::leader::Ack* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::leader::Task, ::leader::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssignTask_, context, request, response, std::move(f));
}

void NodeService::Stub::async::AssignTask(::grpc::ClientContext* context, const ::leader::Task* request, ::leader::Ack* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssignTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::leader::Ack>* NodeService::Stub::PrepareAsyncAssignTaskRaw(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::leader::Ack, ::leader::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AssignTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::leader::Ack>* NodeService::Stub::AsyncAssignTaskRaw(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAssignTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NodeService::Stub::RequestWork(::grpc::ClientContext* context, const ::leader::WorkRequest& request, ::leader::WorkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::leader::WorkRequest, ::leader::WorkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestWork_, context, request, response);
}

void NodeService::Stub::async::RequestWork(::grpc::ClientContext* context, const ::leader::WorkRequest* request, ::leader::WorkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::leader::WorkRequest, ::leader::WorkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestWork_, context, request, response, std::move(f));
}

void NodeService::Stub::async::RequestWork(::grpc::ClientContext* context, const ::leader::WorkRequest* request, ::leader::WorkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestWork_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::leader::WorkResponse>* NodeService::Stub::PrepareAsyncRequestWorkRaw(::grpc::ClientContext* context, const ::leader::WorkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::leader::WorkResponse, ::leader::WorkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestWork_, context, request);
}

::grpc::ClientAsyncResponseReader< ::leader::WorkResponse>* NodeService::Stub::AsyncRequestWorkRaw(::grpc::ClientContext* context, const ::leader::WorkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestWorkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NodeService::Stub::TransferWork(::grpc::ClientContext* context, const ::leader::Task& request, ::leader::Ack* response) {
  return ::grpc::internal::BlockingUnaryCall< ::leader::Task, ::leader::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TransferWork_, context, request, response);
}

void NodeService::Stub::async::TransferWork(::grpc::ClientContext* context, const ::leader::Task* request, ::leader::Ack* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::leader::Task, ::leader::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransferWork_, context, request, response, std::move(f));
}

void NodeService::Stub::async::TransferWork(::grpc::ClientContext* context, const ::leader::Task* request, ::leader::Ack* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransferWork_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::leader::Ack>* NodeService::Stub::PrepareAsyncTransferWorkRaw(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::leader::Ack, ::leader::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TransferWork_, context, request);
}

::grpc::ClientAsyncResponseReader< ::leader::Ack>* NodeService::Stub::AsyncTransferWorkRaw(::grpc::ClientContext* context, const ::leader::Task& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTransferWorkRaw(context, request, cq);
  result->StartCall();
  return result;
}

NodeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeService::Service, ::leader::NodeStatus, ::leader::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::leader::NodeStatus* req,
             ::leader::Ack* resp) {
               return service->Heartbeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeService::Service, ::leader::Task, ::leader::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::leader::Task* req,
             ::leader::Ack* resp) {
               return service->AssignTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeService::Service, ::leader::WorkRequest, ::leader::WorkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::leader::WorkRequest* req,
             ::leader::WorkResponse* resp) {
               return service->RequestWork(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeService::Service, ::leader::Task, ::leader::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::leader::Task* req,
             ::leader::Ack* resp) {
               return service->TransferWork(ctx, req, resp);
             }, this)));
}

NodeService::Service::~Service() {
}

::grpc::Status NodeService::Service::Heartbeat(::grpc::ServerContext* context, const ::leader::NodeStatus* request, ::leader::Ack* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeService::Service::AssignTask(::grpc::ServerContext* context, const ::leader::Task* request, ::leader::Ack* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeService::Service::RequestWork(::grpc::ServerContext* context, const ::leader::WorkRequest* request, ::leader::WorkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeService::Service::TransferWork(::grpc::ServerContext* context, const ::leader::Task* request, ::leader::Ack* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace leader

