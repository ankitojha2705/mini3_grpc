// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: leader.proto
// Protobuf C++ Version: 5.29.3

#ifndef leader_2eproto_2epb_2eh
#define leader_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_leader_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_leader_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_leader_2eproto;
namespace leader {
class Ack;
struct AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class NodeStatus;
struct NodeStatusDefaultTypeInternal;
extern NodeStatusDefaultTypeInternal _NodeStatus_default_instance_;
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class WorkRequest;
struct WorkRequestDefaultTypeInternal;
extern WorkRequestDefaultTypeInternal _WorkRequest_default_instance_;
class WorkResponse;
struct WorkResponseDefaultTypeInternal;
extern WorkResponseDefaultTypeInternal _WorkResponse_default_instance_;
}  // namespace leader
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace leader {

// ===================================================================


// -------------------------------------------------------------------

class WorkRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:leader.WorkRequest) */ {
 public:
  inline WorkRequest() : WorkRequest(nullptr) {}
  ~WorkRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WorkRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WorkRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WorkRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline WorkRequest(const WorkRequest& from) : WorkRequest(nullptr, from) {}
  inline WorkRequest(WorkRequest&& from) noexcept
      : WorkRequest(nullptr, std::move(from)) {}
  inline WorkRequest& operator=(const WorkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkRequest& operator=(WorkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkRequest* internal_default_instance() {
    return reinterpret_cast<const WorkRequest*>(
        &_WorkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(WorkRequest& a, WorkRequest& b) { a.Swap(&b); }
  inline void Swap(WorkRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WorkRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WorkRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WorkRequest& from) { WorkRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WorkRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "leader.WorkRequest"; }

 protected:
  explicit WorkRequest(::google::protobuf::Arena* arena);
  WorkRequest(::google::protobuf::Arena* arena, const WorkRequest& from);
  WorkRequest(::google::protobuf::Arena* arena, WorkRequest&& from) noexcept
      : WorkRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRequesterIdFieldNumber = 1,
    kMaxTasksFieldNumber = 2,
    kMaxStealCountFieldNumber = 3,
  };
  // string requester_id = 1;
  void clear_requester_id() ;
  const std::string& requester_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_requester_id(Arg_&& arg, Args_... args);
  std::string* mutable_requester_id();
  PROTOBUF_NODISCARD std::string* release_requester_id();
  void set_allocated_requester_id(std::string* value);

  private:
  const std::string& _internal_requester_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requester_id(
      const std::string& value);
  std::string* _internal_mutable_requester_id();

  public:
  // int32 max_tasks = 2;
  void clear_max_tasks() ;
  ::int32_t max_tasks() const;
  void set_max_tasks(::int32_t value);

  private:
  ::int32_t _internal_max_tasks() const;
  void _internal_set_max_tasks(::int32_t value);

  public:
  // int32 max_steal_count = 3;
  void clear_max_steal_count() ;
  ::int32_t max_steal_count() const;
  void set_max_steal_count(::int32_t value);

  private:
  ::int32_t _internal_max_steal_count() const;
  void _internal_set_max_steal_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:leader.WorkRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WorkRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr requester_id_;
    ::int32_t max_tasks_;
    ::int32_t max_steal_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_leader_2eproto;
};
// -------------------------------------------------------------------

class Task final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:leader.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Task* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Task));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Task(
      ::google::protobuf::internal::ConstantInitialized);

  inline Task(const Task& from) : Task(nullptr, from) {}
  inline Task(Task&& from) noexcept
      : Task(nullptr, std::move(from)) {}
  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
        &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Task& a, Task& b) { a.Swap(&b); }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Task* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Task>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Task& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Task& from) { Task::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Task* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "leader.Task"; }

 protected:
  explicit Task(::google::protobuf::Arena* arena);
  Task(::google::protobuf::Arena* arena, const Task& from);
  Task(::google::protobuf::Arena* arena, Task&& from) noexcept
      : Task(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSourceNodeFieldNumber = 3,
    kTaskIdFieldNumber = 1,
    kDurationMsFieldNumber = 2,
    kStealCountFieldNumber = 4,
  };
  // string source_node = 3;
  void clear_source_node() ;
  const std::string& source_node() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_node(Arg_&& arg, Args_... args);
  std::string* mutable_source_node();
  PROTOBUF_NODISCARD std::string* release_source_node();
  void set_allocated_source_node(std::string* value);

  private:
  const std::string& _internal_source_node() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_node(
      const std::string& value);
  std::string* _internal_mutable_source_node();

  public:
  // int32 task_id = 1;
  void clear_task_id() ;
  ::int32_t task_id() const;
  void set_task_id(::int32_t value);

  private:
  ::int32_t _internal_task_id() const;
  void _internal_set_task_id(::int32_t value);

  public:
  // int32 duration_ms = 2;
  void clear_duration_ms() ;
  ::int32_t duration_ms() const;
  void set_duration_ms(::int32_t value);

  private:
  ::int32_t _internal_duration_ms() const;
  void _internal_set_duration_ms(::int32_t value);

  public:
  // int32 steal_count = 4;
  void clear_steal_count() ;
  ::int32_t steal_count() const;
  void set_steal_count(::int32_t value);

  private:
  ::int32_t _internal_steal_count() const;
  void _internal_set_steal_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:leader.Task)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      31, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Task& from_msg);
    ::google::protobuf::internal::ArenaStringPtr source_node_;
    ::int32_t task_id_;
    ::int32_t duration_ms_;
    ::int32_t steal_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_leader_2eproto;
};
// -------------------------------------------------------------------

class NodeStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:leader.NodeStatus) */ {
 public:
  inline NodeStatus() : NodeStatus(nullptr) {}
  ~NodeStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NodeStatus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NodeStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NodeStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline NodeStatus(const NodeStatus& from) : NodeStatus(nullptr, from) {}
  inline NodeStatus(NodeStatus&& from) noexcept
      : NodeStatus(nullptr, std::move(from)) {}
  inline NodeStatus& operator=(const NodeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeStatus& operator=(NodeStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeStatus* internal_default_instance() {
    return reinterpret_cast<const NodeStatus*>(
        &_NodeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NodeStatus& a, NodeStatus& b) { a.Swap(&b); }
  inline void Swap(NodeStatus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeStatus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NodeStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NodeStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NodeStatus& from) { NodeStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NodeStatus* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "leader.NodeStatus"; }

 protected:
  explicit NodeStatus(::google::protobuf::Arena* arena);
  NodeStatus(::google::protobuf::Arena* arena, const NodeStatus& from);
  NodeStatus(::google::protobuf::Arena* arena, NodeStatus&& from) noexcept
      : NodeStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeIdFieldNumber = 1,
    kScoreFieldNumber = 2,
    kQueueLengthFieldNumber = 3,
    kCpuUtilizationFieldNumber = 4,
    kMemoryUtilizationFieldNumber = 5,
    kLastHeartbeatTimeFieldNumber = 6,
    kIsLeaderFieldNumber = 7,
  };
  // string node_id = 1;
  void clear_node_id() ;
  const std::string& node_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node_id(Arg_&& arg, Args_... args);
  std::string* mutable_node_id();
  PROTOBUF_NODISCARD std::string* release_node_id();
  void set_allocated_node_id(std::string* value);

  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(
      const std::string& value);
  std::string* _internal_mutable_node_id();

  public:
  // float score = 2;
  void clear_score() ;
  float score() const;
  void set_score(float value);

  private:
  float _internal_score() const;
  void _internal_set_score(float value);

  public:
  // int32 queue_length = 3;
  void clear_queue_length() ;
  ::int32_t queue_length() const;
  void set_queue_length(::int32_t value);

  private:
  ::int32_t _internal_queue_length() const;
  void _internal_set_queue_length(::int32_t value);

  public:
  // float cpu_utilization = 4;
  void clear_cpu_utilization() ;
  float cpu_utilization() const;
  void set_cpu_utilization(float value);

  private:
  float _internal_cpu_utilization() const;
  void _internal_set_cpu_utilization(float value);

  public:
  // float memory_utilization = 5;
  void clear_memory_utilization() ;
  float memory_utilization() const;
  void set_memory_utilization(float value);

  private:
  float _internal_memory_utilization() const;
  void _internal_set_memory_utilization(float value);

  public:
  // int64 last_heartbeat_time = 6;
  void clear_last_heartbeat_time() ;
  ::int64_t last_heartbeat_time() const;
  void set_last_heartbeat_time(::int64_t value);

  private:
  ::int64_t _internal_last_heartbeat_time() const;
  void _internal_set_last_heartbeat_time(::int64_t value);

  public:
  // bool is_leader = 7;
  void clear_is_leader() ;
  bool is_leader() const;
  void set_is_leader(bool value);

  private:
  bool _internal_is_leader() const;
  void _internal_set_is_leader(bool value);

  public:
  // @@protoc_insertion_point(class_scope:leader.NodeStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      33, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NodeStatus& from_msg);
    ::google::protobuf::internal::ArenaStringPtr node_id_;
    float score_;
    ::int32_t queue_length_;
    float cpu_utilization_;
    float memory_utilization_;
    ::int64_t last_heartbeat_time_;
    bool is_leader_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_leader_2eproto;
};
// -------------------------------------------------------------------

class Ack final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:leader.Ack) */ {
 public:
  inline Ack() : Ack(nullptr) {}
  ~Ack() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Ack* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Ack));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Ack(
      ::google::protobuf::internal::ConstantInitialized);

  inline Ack(const Ack& from) : Ack(nullptr, from) {}
  inline Ack(Ack&& from) noexcept
      : Ack(nullptr, std::move(from)) {}
  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ack& operator=(Ack&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
        &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Ack& a, Ack& b) { a.Swap(&b); }
  inline void Swap(Ack* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ack* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ack* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Ack>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Ack& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Ack& from) { Ack::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Ack* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "leader.Ack"; }

 protected:
  explicit Ack(::google::protobuf::Arena* arena);
  Ack(::google::protobuf::Arena* arena, const Ack& from);
  Ack(::google::protobuf::Arena* arena, Ack&& from) noexcept
      : Ack(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // string message = 1;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 2;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:leader.Ack)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      26, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Ack& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_leader_2eproto;
};
// -------------------------------------------------------------------

class WorkResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:leader.WorkResponse) */ {
 public:
  inline WorkResponse() : WorkResponse(nullptr) {}
  ~WorkResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WorkResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WorkResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WorkResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline WorkResponse(const WorkResponse& from) : WorkResponse(nullptr, from) {}
  inline WorkResponse(WorkResponse&& from) noexcept
      : WorkResponse(nullptr, std::move(from)) {}
  inline WorkResponse& operator=(const WorkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkResponse& operator=(WorkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkResponse* internal_default_instance() {
    return reinterpret_cast<const WorkResponse*>(
        &_WorkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(WorkResponse& a, WorkResponse& b) { a.Swap(&b); }
  inline void Swap(WorkResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WorkResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WorkResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WorkResponse& from) { WorkResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WorkResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "leader.WorkResponse"; }

 protected:
  explicit WorkResponse(::google::protobuf::Arena* arena);
  WorkResponse(::google::protobuf::Arena* arena, const WorkResponse& from);
  WorkResponse(::google::protobuf::Arena* arena, WorkResponse&& from) noexcept
      : WorkResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTasksFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // repeated .leader.Task tasks = 1;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;

  public:
  void clear_tasks() ;
  ::leader::Task* mutable_tasks(int index);
  ::google::protobuf::RepeatedPtrField<::leader::Task>* mutable_tasks();

  private:
  const ::google::protobuf::RepeatedPtrField<::leader::Task>& _internal_tasks() const;
  ::google::protobuf::RepeatedPtrField<::leader::Task>* _internal_mutable_tasks();
  public:
  const ::leader::Task& tasks(int index) const;
  ::leader::Task* add_tasks();
  const ::google::protobuf::RepeatedPtrField<::leader::Task>& tasks() const;
  // bool success = 2;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:leader.WorkResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WorkResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::leader::Task > tasks_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_leader_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NodeStatus

// string node_id = 1;
inline void NodeStatus::clear_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.ClearToEmpty();
}
inline const std::string& NodeStatus::node_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:leader.NodeStatus.node_id)
  return _internal_node_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NodeStatus::set_node_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:leader.NodeStatus.node_id)
}
inline std::string* NodeStatus::mutable_node_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:leader.NodeStatus.node_id)
  return _s;
}
inline const std::string& NodeStatus::_internal_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_id_.Get();
}
inline void NodeStatus::_internal_set_node_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.Set(value, GetArena());
}
inline std::string* NodeStatus::_internal_mutable_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_id_.Mutable( GetArena());
}
inline std::string* NodeStatus::release_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:leader.NodeStatus.node_id)
  return _impl_.node_id_.Release();
}
inline void NodeStatus::set_allocated_node_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_id_.IsDefault()) {
    _impl_.node_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:leader.NodeStatus.node_id)
}

// float score = 2;
inline void NodeStatus::clear_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = 0;
}
inline float NodeStatus::score() const {
  // @@protoc_insertion_point(field_get:leader.NodeStatus.score)
  return _internal_score();
}
inline void NodeStatus::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:leader.NodeStatus.score)
}
inline float NodeStatus::_internal_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.score_;
}
inline void NodeStatus::_internal_set_score(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = value;
}

// int32 queue_length = 3;
inline void NodeStatus::clear_queue_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_length_ = 0;
}
inline ::int32_t NodeStatus::queue_length() const {
  // @@protoc_insertion_point(field_get:leader.NodeStatus.queue_length)
  return _internal_queue_length();
}
inline void NodeStatus::set_queue_length(::int32_t value) {
  _internal_set_queue_length(value);
  // @@protoc_insertion_point(field_set:leader.NodeStatus.queue_length)
}
inline ::int32_t NodeStatus::_internal_queue_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queue_length_;
}
inline void NodeStatus::_internal_set_queue_length(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_length_ = value;
}

// float cpu_utilization = 4;
inline void NodeStatus::clear_cpu_utilization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_utilization_ = 0;
}
inline float NodeStatus::cpu_utilization() const {
  // @@protoc_insertion_point(field_get:leader.NodeStatus.cpu_utilization)
  return _internal_cpu_utilization();
}
inline void NodeStatus::set_cpu_utilization(float value) {
  _internal_set_cpu_utilization(value);
  // @@protoc_insertion_point(field_set:leader.NodeStatus.cpu_utilization)
}
inline float NodeStatus::_internal_cpu_utilization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cpu_utilization_;
}
inline void NodeStatus::_internal_set_cpu_utilization(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_utilization_ = value;
}

// float memory_utilization = 5;
inline void NodeStatus::clear_memory_utilization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_utilization_ = 0;
}
inline float NodeStatus::memory_utilization() const {
  // @@protoc_insertion_point(field_get:leader.NodeStatus.memory_utilization)
  return _internal_memory_utilization();
}
inline void NodeStatus::set_memory_utilization(float value) {
  _internal_set_memory_utilization(value);
  // @@protoc_insertion_point(field_set:leader.NodeStatus.memory_utilization)
}
inline float NodeStatus::_internal_memory_utilization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.memory_utilization_;
}
inline void NodeStatus::_internal_set_memory_utilization(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_utilization_ = value;
}

// int64 last_heartbeat_time = 6;
inline void NodeStatus::clear_last_heartbeat_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_heartbeat_time_ = ::int64_t{0};
}
inline ::int64_t NodeStatus::last_heartbeat_time() const {
  // @@protoc_insertion_point(field_get:leader.NodeStatus.last_heartbeat_time)
  return _internal_last_heartbeat_time();
}
inline void NodeStatus::set_last_heartbeat_time(::int64_t value) {
  _internal_set_last_heartbeat_time(value);
  // @@protoc_insertion_point(field_set:leader.NodeStatus.last_heartbeat_time)
}
inline ::int64_t NodeStatus::_internal_last_heartbeat_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_heartbeat_time_;
}
inline void NodeStatus::_internal_set_last_heartbeat_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_heartbeat_time_ = value;
}

// bool is_leader = 7;
inline void NodeStatus::clear_is_leader() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_leader_ = false;
}
inline bool NodeStatus::is_leader() const {
  // @@protoc_insertion_point(field_get:leader.NodeStatus.is_leader)
  return _internal_is_leader();
}
inline void NodeStatus::set_is_leader(bool value) {
  _internal_set_is_leader(value);
  // @@protoc_insertion_point(field_set:leader.NodeStatus.is_leader)
}
inline bool NodeStatus::_internal_is_leader() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_leader_;
}
inline void NodeStatus::_internal_set_is_leader(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_leader_ = value;
}

// -------------------------------------------------------------------

// Task

// int32 task_id = 1;
inline void Task::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = 0;
}
inline ::int32_t Task::task_id() const {
  // @@protoc_insertion_point(field_get:leader.Task.task_id)
  return _internal_task_id();
}
inline void Task::set_task_id(::int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:leader.Task.task_id)
}
inline ::int32_t Task::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_;
}
inline void Task::_internal_set_task_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = value;
}

// int32 duration_ms = 2;
inline void Task::clear_duration_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_ms_ = 0;
}
inline ::int32_t Task::duration_ms() const {
  // @@protoc_insertion_point(field_get:leader.Task.duration_ms)
  return _internal_duration_ms();
}
inline void Task::set_duration_ms(::int32_t value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:leader.Task.duration_ms)
}
inline ::int32_t Task::_internal_duration_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.duration_ms_;
}
inline void Task::_internal_set_duration_ms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_ms_ = value;
}

// string source_node = 3;
inline void Task::clear_source_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_node_.ClearToEmpty();
}
inline const std::string& Task::source_node() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:leader.Task.source_node)
  return _internal_source_node();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Task::set_source_node(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_node_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:leader.Task.source_node)
}
inline std::string* Task::mutable_source_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_node();
  // @@protoc_insertion_point(field_mutable:leader.Task.source_node)
  return _s;
}
inline const std::string& Task::_internal_source_node() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_node_.Get();
}
inline void Task::_internal_set_source_node(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_node_.Set(value, GetArena());
}
inline std::string* Task::_internal_mutable_source_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_node_.Mutable( GetArena());
}
inline std::string* Task::release_source_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:leader.Task.source_node)
  return _impl_.source_node_.Release();
}
inline void Task::set_allocated_source_node(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_node_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_node_.IsDefault()) {
    _impl_.source_node_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:leader.Task.source_node)
}

// int32 steal_count = 4;
inline void Task::clear_steal_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steal_count_ = 0;
}
inline ::int32_t Task::steal_count() const {
  // @@protoc_insertion_point(field_get:leader.Task.steal_count)
  return _internal_steal_count();
}
inline void Task::set_steal_count(::int32_t value) {
  _internal_set_steal_count(value);
  // @@protoc_insertion_point(field_set:leader.Task.steal_count)
}
inline ::int32_t Task::_internal_steal_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steal_count_;
}
inline void Task::_internal_set_steal_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steal_count_ = value;
}

// -------------------------------------------------------------------

// WorkRequest

// string requester_id = 1;
inline void WorkRequest::clear_requester_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_id_.ClearToEmpty();
}
inline const std::string& WorkRequest::requester_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:leader.WorkRequest.requester_id)
  return _internal_requester_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WorkRequest::set_requester_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:leader.WorkRequest.requester_id)
}
inline std::string* WorkRequest::mutable_requester_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_requester_id();
  // @@protoc_insertion_point(field_mutable:leader.WorkRequest.requester_id)
  return _s;
}
inline const std::string& WorkRequest::_internal_requester_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requester_id_.Get();
}
inline void WorkRequest::_internal_set_requester_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_id_.Set(value, GetArena());
}
inline std::string* WorkRequest::_internal_mutable_requester_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.requester_id_.Mutable( GetArena());
}
inline std::string* WorkRequest::release_requester_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:leader.WorkRequest.requester_id)
  return _impl_.requester_id_.Release();
}
inline void WorkRequest::set_allocated_requester_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.requester_id_.IsDefault()) {
    _impl_.requester_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:leader.WorkRequest.requester_id)
}

// int32 max_tasks = 2;
inline void WorkRequest::clear_max_tasks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_tasks_ = 0;
}
inline ::int32_t WorkRequest::max_tasks() const {
  // @@protoc_insertion_point(field_get:leader.WorkRequest.max_tasks)
  return _internal_max_tasks();
}
inline void WorkRequest::set_max_tasks(::int32_t value) {
  _internal_set_max_tasks(value);
  // @@protoc_insertion_point(field_set:leader.WorkRequest.max_tasks)
}
inline ::int32_t WorkRequest::_internal_max_tasks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_tasks_;
}
inline void WorkRequest::_internal_set_max_tasks(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_tasks_ = value;
}

// int32 max_steal_count = 3;
inline void WorkRequest::clear_max_steal_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_steal_count_ = 0;
}
inline ::int32_t WorkRequest::max_steal_count() const {
  // @@protoc_insertion_point(field_get:leader.WorkRequest.max_steal_count)
  return _internal_max_steal_count();
}
inline void WorkRequest::set_max_steal_count(::int32_t value) {
  _internal_set_max_steal_count(value);
  // @@protoc_insertion_point(field_set:leader.WorkRequest.max_steal_count)
}
inline ::int32_t WorkRequest::_internal_max_steal_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_steal_count_;
}
inline void WorkRequest::_internal_set_max_steal_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_steal_count_ = value;
}

// -------------------------------------------------------------------

// WorkResponse

// repeated .leader.Task tasks = 1;
inline int WorkResponse::_internal_tasks_size() const {
  return _internal_tasks().size();
}
inline int WorkResponse::tasks_size() const {
  return _internal_tasks_size();
}
inline void WorkResponse::clear_tasks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tasks_.Clear();
}
inline ::leader::Task* WorkResponse::mutable_tasks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:leader.WorkResponse.tasks)
  return _internal_mutable_tasks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::leader::Task>* WorkResponse::mutable_tasks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:leader.WorkResponse.tasks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tasks();
}
inline const ::leader::Task& WorkResponse::tasks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:leader.WorkResponse.tasks)
  return _internal_tasks().Get(index);
}
inline ::leader::Task* WorkResponse::add_tasks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::leader::Task* _add = _internal_mutable_tasks()->Add();
  // @@protoc_insertion_point(field_add:leader.WorkResponse.tasks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::leader::Task>& WorkResponse::tasks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:leader.WorkResponse.tasks)
  return _internal_tasks();
}
inline const ::google::protobuf::RepeatedPtrField<::leader::Task>&
WorkResponse::_internal_tasks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tasks_;
}
inline ::google::protobuf::RepeatedPtrField<::leader::Task>*
WorkResponse::_internal_mutable_tasks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tasks_;
}

// bool success = 2;
inline void WorkResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool WorkResponse::success() const {
  // @@protoc_insertion_point(field_get:leader.WorkResponse.success)
  return _internal_success();
}
inline void WorkResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:leader.WorkResponse.success)
}
inline bool WorkResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void WorkResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// Ack

// string message = 1;
inline void Ack::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Ack::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:leader.Ack.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Ack::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:leader.Ack.message)
}
inline std::string* Ack::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:leader.Ack.message)
  return _s;
}
inline const std::string& Ack::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void Ack::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* Ack::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* Ack::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:leader.Ack.message)
  return _impl_.message_.Release();
}
inline void Ack::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:leader.Ack.message)
}

// bool success = 2;
inline void Ack::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool Ack::success() const {
  // @@protoc_insertion_point(field_get:leader.Ack.success)
  return _internal_success();
}
inline void Ack::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:leader.Ack.success)
}
inline bool Ack::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void Ack::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace leader


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // leader_2eproto_2epb_2eh
